node {
   def gitcommit
   stage('VerificaciÃ³n SCM') {
     checkout scm
     sh "git rev-parse --short HEAD > .git/commit-id"                        
     gitcommit = readFile('.git/commit-id').trim()
   }
   stage('test') {
     nodejs(nodeJSInstallationName: 'nodejs') {
       sh 'npm install --only=dev'
       sh 'npm test'
     }
   }

    stage('Sonar Scanner') {
      def sonarqubeScannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
      withCredentials([string(credentialsId: 'sonar', variable: 'sonarLogin')]) {
        sh "${sonarqubeScannerHome}/bin/sonar-scanner -e -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=${sonarLogin} -Dsonar.projectName=nodejspipeline -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.projectKey=GS -Dsonar.sources=complete/src/main/ -Dsonar.tests=test/ -Dsonar.language=java -Dsonar.java.binaries=."
      }
    }

   stage('Docker Build & Push') {
     docker.withRegistry('https://registry.hub.docker.com', 'docker-hub') {
      def nuestraapp = docker.build("manbonad/nodejsapp:${gitcommit}", ".")
      nuestraapp.push()
     }
   }
}
